package hflink.common.ports;

import java.util.Optional;
import hflink.common.events.DataLinkFrameEvent;
import hflink.common.objects.DataLinkFrame;
import sysmlinjava.annotations.comments.Hyperlink;
import sysmlinjava.annotations.requirements.RequirementSpecificationLink;
import sysmlinjava.blocks.SysMLBlock;
import sysmlinjava.comments.SysMLHyperlink;
import sysmlinjava.common.SysMLClass;
import sysmlinjava.events.SysMLSignalEvent;
import sysmlinjava.ports.SysMLFullPort;

/**
 * Port that simulates the protocol to receive data-link frames
 * 
 * @author ModelerOne
 *
 */
public class DataLinkReceiveProtocol extends SysMLFullPort
{
	/**
	 * Standard specification for the protocol
	 */
	@RequirementSpecificationLink
	@Hyperlink
	public SysMLHyperlink protocolStandard;

	/**
	 * Constructor
	 * 
	 * @param contextBlock      block in whose context the port resides
	 * @param eventContextBlock block to receive signal events generated by the port
	 * @param id                unique ID
	 */
	public DataLinkReceiveProtocol(SysMLBlock contextBlock, SysMLBlock eventContextBlock, Long id)
	{
		super(contextBlock, Optional.of(eventContextBlock), id);
	}

	@Override
	protected SysMLSignalEvent eventFor(SysMLClass object)
	{
		SysMLSignalEvent result = null;
		if (object instanceof DataLinkFrame)
			result = new DataLinkFrameEvent((DataLinkFrame)object);
		else
			logger.warning("unexpected object type: " + object.getClass().getSimpleName());
		return result;
	}

	@Override
	protected void createHyperlinks()
	{
		protocolStandard = new SysMLHyperlink("IRS for Data Link Receive Protocol", "file://IRS for Data Link Receive Protocol");
	}

}
