package hflink.common.ports;

import java.util.Optional;
import hflink.common.events.HTTPRequestEvent;
import hflink.common.objects.HTTPRequest;
import hflink.common.objects.HTTPResponse;
import hflink.common.objects.HTTPResponseString;
import sysmlinjava.annotations.comments.Hyperlink;
import sysmlinjava.annotations.requirements.RequirementSpecificationLink;
import sysmlinjava.blocks.SysMLBlock;
import sysmlinjava.comments.SysMLHyperlink;
import sysmlinjava.common.SysMLClass;
import sysmlinjava.events.SysMLSignalEvent;
import sysmlinjava.ports.SysMLFullPort;

/**
 * Port to simulate the server (web server) side of the HTTP protocol
 * 
 * @author ModelerOne
 *
 */
public class HTTPServer extends SysMLFullPort
{
	/**
	 * Standard that specifies the protocol
	 */
	@RequirementSpecificationLink
	@Hyperlink
	public SysMLHyperlink protocolStandard;

	/**
	 * Constructor
	 * 
	 * @param contextBlock      block (web server) in whose context the port resides
	 * @param eventContextBlock block (web server) to receive signal events
	 *                          generated by the port
	 * @param id                unique ID
	 */
	public HTTPServer(SysMLBlock contextBlock, SysMLBlock eventContextBlock, Long id)
	{
		super(contextBlock, Optional.of(eventContextBlock), id);
	}

	@Override
	protected SysMLSignalEvent eventFor(SysMLClass object)
	{
		SysMLSignalEvent result = null;
		if (object instanceof HTTPRequest)
			result = new HTTPRequestEvent((HTTPRequest)object);
		else
			logger.warning("unexpected object type: " + object.getClass().getSimpleName());
		return result;
	}

	@Override
	protected SysMLClass serverObjectFor(SysMLClass clientObject)
	{
		SysMLClass result = null;
		if (clientObject instanceof HTTPResponseString)
		{
			HTTPResponseString httpResponseString = (HTTPResponseString)clientObject;
			HTTPResponse httpResponse = new HTTPResponse(httpResponseString);
			httpResponse.ipSource = httpResponseString.ipSource;
			httpResponse.ipDestination = httpResponseString.ipDestination;
			httpResponse.udpPort = 0;
			result = httpResponse;
		}
		else
			logger.warning("unexpected client object type: " + clientObject.getClass().getSimpleName());
		return result;
	}

	@Override
	protected void createHyperlinks()
	{
		protocolStandard = new SysMLHyperlink("Hypertext Transfer Protocol Version 3 (HTTP/3)", "https://quicwg.org/base-drafts/draft-ietf-quic-http.html");
	}
}
