package hflink.common.ports;

import java.util.Optional;
import hflink.common.events.IPPacketEvent;
import hflink.common.objects.IPPacket;
import hflink.common.objects.UDPDatagram;
import sysmlinjava.annotations.comments.Hyperlink;
import sysmlinjava.annotations.requirements.RequirementSpecificationLink;
import sysmlinjava.blocks.SysMLBlock;
import sysmlinjava.comments.SysMLHyperlink;
import sysmlinjava.common.SysMLClass;
import sysmlinjava.events.SysMLSignalEvent;
import sysmlinjava.ports.SysMLFullPort;

/**
 * Port to simulate the internet protocol (IP)
 * 
 * @author ModelerOne
 *
 */
public class IP extends SysMLFullPort
{
	/**
	 * Standard that specifies the protocol
	 */
	@RequirementSpecificationLink
	@Hyperlink
	public SysMLHyperlink protocolStandard;

	/**
	 * Constructor
	 * 
	 * @param contextBlock      block in whose context the port resides
	 * @param eventContextBlock block to receive signal events generated by the port
	 * @param id                unique ID
	 */
	public IP(SysMLBlock contextBlock, SysMLBlock eventContextBlock, Long id)
	{
		super(contextBlock, Optional.of(eventContextBlock), id);
	}

	/**
	 * Constructor
	 * 
	 * @param contextBlock block in whose context the port resides
	 * @param id           unique ID
	 */
	public IP(SysMLBlock contextBlock, Long id)
	{
		super(contextBlock, id);
	}

	@Override
	protected SysMLClass serverObjectFor(SysMLClass clientObject)
	{
		SysMLClass result = null;
		if (clientObject instanceof UDPDatagram)
			result = new IPPacket(((UDPDatagram)clientObject).sourceIPAddress, ((UDPDatagram)clientObject).destinationIPAddress, (UDPDatagram)clientObject);
		else
			logger.warning("unexpected client object type: " + clientObject.getClass().getSimpleName());
		return result;
	}

	@Override
	protected SysMLClass clientObjectFor(SysMLClass serverObject)
	{
		SysMLClass result = null;
		if (serverObject instanceof IPPacket)
			result = ((IPPacket)serverObject).data;
		else
			logger.warning("unexpected serverObject type: " + serverObject.getClass().getSimpleName());
		return result;
	}

	@Override
	protected SysMLSignalEvent eventFor(SysMLClass object)
	{
		SysMLSignalEvent result = null;
		if (object instanceof IPPacket)
			result = new IPPacketEvent((IPPacket)object);
		else
			logger.warning("unexpected object type: " + object.getClass().getSimpleName());
		return result;
	}

	@Override
	protected void createHyperlinks()
	{
		protocolStandard = new SysMLHyperlink("IETF RFC-791 Internet Protocol", "https://tools.ietf.org/html/rfc791");
	}
}
