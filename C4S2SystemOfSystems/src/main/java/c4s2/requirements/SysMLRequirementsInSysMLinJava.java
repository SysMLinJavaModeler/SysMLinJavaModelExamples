package c4s2.requirements;

import java.util.List;
import java.util.Map;
import java.util.Arrays;
import java.util.Optional;
import sysmlinjava.annotations.Requirement;
import sysmlinjava.comments.SysMLHyperlink;
import sysmlinjava.requirements.RequirementCategoryEnum;
import sysmlinjava.requirements.RequirementStatusEnum;
import sysmlinjava.requirements.SysMLRequirement;
import sysmlinjava.requirements.SysMLRequirements;
import sysmlinjava.requirements.SysMLRiskKind;
import sysmlinjava.requirements.SysMLVerificationMethodKind;

/**
 * This code was auto-generated by the SysMLinJava TaskMaster(tm). The
 * {@code SysMLRequirementsInSysMLinJava} is an extension of the {@code sysmlinjava.requirements.SysMLRequirements}
 * class that specifies a collection (list) of {@code SysMLRequirement}s.
 * This class can be and is used to view and manipulate requirements
 * within the context of a SysMLinJava model.
 */
public class SysMLRequirementsInSysMLinJava extends SysMLRequirements
{
	/**
	 * Declarations of the instances of {@code SysMLRequirement}s that are included
	 * in the collection.
	 */
	@Requirement public static final SysMLRequirement id0 = new SysMLRequirement("0", "Title0", "System shall do this 0", RequirementCategoryEnum.Functional, List.of(SysMLVerificationMethodKind.Test), SysMLRiskKind.High, RequirementStatusEnum.Proposed, 5, "R Lee", "U Grant", Map.of("att2","value2 0","att1","value1 0"));
	@Requirement public static final SysMLRequirement id1 = new SysMLRequirement("1", "Title1", "System shall do this 1", RequirementCategoryEnum.Functional, List.of(SysMLVerificationMethodKind.Demonstration), SysMLRiskKind.High, RequirementStatusEnum.Proposed, 5, "R Lee", "U Grant", Map.of("att2","value2 1","att1","value1 1"));
	@Requirement public static final SysMLRequirement id1_1 = new SysMLRequirement("1.1", "Title1.1", "System shall do this 1.1", RequirementCategoryEnum.Functional, List.of(SysMLVerificationMethodKind.Test, SysMLVerificationMethodKind.Demonstration), SysMLRiskKind.High, RequirementStatusEnum.Proposed, 5, "R Lee", "U Grant", Map.of("att2","value2 1.1","att1","value1 1.1"));
	@Requirement public static final SysMLRequirement id1_2 = new SysMLRequirement("1.2", "Title1.2", "System shall do this 1.2", RequirementCategoryEnum.Functional, List.of(SysMLVerificationMethodKind.Test, SysMLVerificationMethodKind.Demonstration), SysMLRiskKind.High, RequirementStatusEnum.Proposed, 5, "R Lee", "U Grant", Map.of("att2","value2 1.2","att1","value1 1.2"));
	@Requirement public static final SysMLRequirement id2 = new SysMLRequirement("2", "Title2", "System shall do this 2", RequirementCategoryEnum.Functional, List.of(SysMLVerificationMethodKind.Test, SysMLVerificationMethodKind.Demonstration), SysMLRiskKind.High, RequirementStatusEnum.Proposed, 5, "R Lee", "U Grant", Map.of("att2","value2 2","att1","value1 2"));
	@Requirement public static final SysMLRequirement id2_1 = new SysMLRequirement("2.1", "Title2.1", "System shall do this 2.1", RequirementCategoryEnum.Functional, List.of(SysMLVerificationMethodKind.Demonstration), SysMLRiskKind.High, RequirementStatusEnum.Proposed, 5, "R Lee", "U Grant", Map.of("att2","value2 2.1","att1","value1 2.1"));
	@Requirement public static final SysMLRequirement id2_2 = new SysMLRequirement("2.2", "Title2.2", "System shall do this 2.2", RequirementCategoryEnum.Functional, List.of(SysMLVerificationMethodKind.Demonstration), SysMLRiskKind.High, RequirementStatusEnum.Proposed, 5, "R Lee", "U Grant", Map.of("att2","value2 2.2","att1","value1 2.2"));
	@Requirement public static final SysMLRequirement id2_3 = new SysMLRequirement("2.3", "Title2.3", "System shall do this 2.3", RequirementCategoryEnum.Functional, List.of(SysMLVerificationMethodKind.Demonstration), SysMLRiskKind.High, RequirementStatusEnum.Proposed, 5, "R Lee", "U Grant", Map.of("att2","value2 2.3","att1","value1 2.3"));

	/**
	 * Constructor that adds all declared instances of {@code SysMLRequirement}s to
	 * the collection and creates all dependencies.
	 */
	public SysMLRequirementsInSysMLinJava()
	{
		super();

	}
	/**
	* Creates the SysML &lt;&lt;decomposedBy&gt;&gt; dependencies between requirements.
	*/
	@Override
	protected void createDecomposedBys()
	{
		id0.decomposedBy.addAll(List.of(id1));
		id1.decomposedBy.addAll(List.of(id1_1, id1_2));
		id2.decomposedBy.addAll(List.of(id2_1, id2_2, id2_3));
	}

	/**
	* Creates the SysML &lt;&lt;decompositionOf&gt;&gt; dependencies between requirements.
	*/
	@Override
	protected void createDecompositionOfs()
	{
	}

	/**
	 * Creates the SysML &lt;&lt;containedBy&gt;&gt; dependencies between requirements.
	 */
	@Override
	protected void createContainedBys()
	{
	}

	/**
	 * Creates the SysML &lt;&lt;contained&gt;&gt; dependencies between requirements.
	 */
	@Override
	protected void createContaineds()
	{
	}

	/**
	 * Creates the SysML &lt;&lt;copyOf&gt;&gt; dependencies between requirements.
	 */
	@Override
	protected void createCopyOfs()
	{
			id2_1.copyOf = Optional.of(id1_1);
			id2_2.copyOf = Optional.of(id1_2);
			id2_3.copyOf = Optional.of(id1_2);
	}

	/**
	 * Creates the SysML &lt;&lt;copiedBy&gt;&gt; dependencies between requirements.
	 */
	@Override
	protected void createCopiedBys()
	{
	}

	/**
	 * Creates the SysML &lt;&lt;satisfiedBy&gt;&gt; dependencies between requirements.
	 */
	@Override
	protected void createSatisfiedBys()
	{
	}

	/**
	 * Creates the SysML &lt;&lt;refinedBy&gt;&gt; dependencies between requirements.
	 */
	@Override
	protected void createRefinedBys()
	{
		id2_1.refinedBy.addAll(List.of(ASysMLinJavaModelElement.class));
		id2_2.refinedBy.addAll(List.of(ASysMLinJavaModelElement.class));
		id2_3.refinedBy.addAll(List.of(ASysMLinJavaModelElement.class));
	}

	/**
	 * Creates the SysML &lt;&lt;tracedTo&gt;&gt; dependencies between requirements.
	 */
	@Override
	protected void createTracedTos()
	{
		id1_1.tracedTo.addAll(List.of(ASysMLinJavaModelElement.class, DSysMLinJavaModelElement.class));
		id1_2.tracedTo.addAll(List.of(BSysMLinJavaModelElement.class, CSysMLinJavaModelElement.class));
		id2_1.tracedTo.addAll(List.of(ASysMLinJavaModelElement.class));
		id2_2.tracedTo.addAll(List.of(BSysMLinJavaModelElement.class));
		id2_3.tracedTo.addAll(List.of(CSysMLinJavaModelElement.class, DSysMLinJavaModelElement.class));
	}

	/**
	 * Creates the SysML &lt;&lt;verifiedBy&gt;&gt; dependencies between requirements.
	 */
	@Override
	protected void createVerifiedBys()
	{
		id0.verifiedBy.addAll(List.of(TestCase0.class, TestCase1.class, TestCase2.class));
		id1.verifiedBy.addAll(List.of(TestCase1.class));
		id2.verifiedBy.addAll(List.of(TestCase2.class));
	}

	/**
	 * Creates the SysML &lt;&lt;derivedBy&gt;&gt; dependencies between requirements.
	 */
	@Override
	protected void createDerivedBys()
	{
	}

	/**
	 * Creates the SysML &lt;&lt;derivedFrom&gt;&gt; dependencies between requirements.
	 */
	@Override
	protected void createDerivedFroms()
	{
	}

	/**
	 * Creates the master requirements for the copyOf requirements
	 */
	@Override
	protected void createMasters()
	{
	}

	/**
	 * Creates the &lt;&lt;specializationOf&gt;&gt; dependendency for the requirement
	 */
	@Override
	protected void createSpecializationOfs()
	{
	}

	/**
	 * Creates the SysML &lt;&lt;supportingInformationLink&gt;&gt; dependencies between requirements.
	 */
	@Override
	protected void createSupportingInformationLinks()
	{
		id0.supportingInformationLinks = List.of(SysMLHyperlink.valueOf("title=SystemSpe uri=http://SysMLinJava.com/specs/SystemSpec.pdf"),SysMLHyperlink.valueOf("title=SubsystemSpe uri=http://SysMLinJava.com/specs/SubsystemSpec.pdf"));
	}

	/**
	 * Creates a list of all the declared requirements
	 */
	@Override
	protected void createList()
	{
		requirements = Arrays.asList(id0, id1, id1_1, id1_2, id2, id2_1, id2_2, id2_3);
	}
	}
